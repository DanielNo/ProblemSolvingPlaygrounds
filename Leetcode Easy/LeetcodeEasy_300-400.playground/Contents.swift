//: Playground - noun: a place where people can play

import UIKit

/*
 387. First Unique Character in a String
 
 Approach : Map counts of characters in dictionary. Traverse the string and return the first dictionary value that has one occurence.
 Time Complexity : O(n)   , O(2n) computations
 Space Complexity : O(n)
 */

// Naive solution with mapping, this can be optimized..
func firstUniqChar(_ s: String) -> Int {
    var dict : [Character : Int] = Dictionary()
    for (index,char) in s.enumerated(){
        if let count = dict[char]{
            dict[char] = dict[char]! + 1
        }else{
            dict[char] = 1
        }
    }
    var index = -1
    for (index,char) in s.enumerated(){
        if dict[char] == 1 {
            return index
        }
    }
    return index
    
}

/* 389. Find the Difference : https://leetcode.com/problems/find-the-difference/description/
 Given two strings s and t which consist of only lowercase letters.
 String t is generated by random shuffling string s and then add one more letter at a random position.
 Find the letter that was added in t.
 
 Input:
 s = "abcd"
 t = "abcde"
 Output: e
 
 
 Approach 1: Sort the strings and compare the characters in character arrays for the first difference. Return the differing character found in t.
 Time Complexity : O(n log n)
 Space Complexity : O(1)
 
 Approach 2 with a hashmap(slightly faster): Input counts of occurences of all characters in larger string t into a hashmap. Iterate characters in string s, subtracting values by one. Return character whose count is 1.
 Time complexity : O(n)
 Space Complexity : O(n)
 
 */
func findTheDifference(_ s: String, _ t: String) -> Character {
    var s1 = s.sorted{return $0 < $1}
    var t1 = t.sorted { return $0 < $1}
    for(index,char) in s1.enumerated(){
        if(s1[index] != t1[index]){
            return t1[index]
        }
    }
    return t1.last!
}

func findTheDifference2(_ s: String, _ t: String) -> Character {
    var dict : [Character : Int] = Dictionary()
    for(index,char) in t.enumerated(){
        dict[char] = dict[char] == nil ? 1 : dict[char]! + 1
    }
    for(index,char) in s.enumerated(){
        dict[char]! -= 1
    }
    let extraChar = dict.filter { $0.value == 1
    }
    return extraChar.keys.first!
}
//findTheDifference2("hello", "helloo")

